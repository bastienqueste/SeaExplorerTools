## Notes---
Why absent missionNum and gliderID ?

Bornholm ADCP vs flight model

Bornholm ADCP backscatter

Apply lag to flight model

Test out different cost function with more weight towards BML

Move dive number and profile number registering to SXBQ.py






########### DIRECTORY BUILDER



#missions = {'SEA055':[18,19,20,21],
#            'SEA061':[38,39,40,41]}
#missions = {'SEA063':[17]}
#missions = {'SEA055':[21]}
missions = {'SEA044':[28,29,32,33,34]}

# raw_folders = []
# for k in missions.keys():
#     for m in missions[k]:
#         raw_folders.append('D:/Storage/Dropbox/VOTO_Data/6_SAMBA_003/'+k+'/'+k+'_M'+str(m)+'/3_Non_processed/2_NAV/')
#         raw_folders.append('D:/Storage/Dropbox/VOTO_Data/6_SAMBA_003/'+k+'/'+k+'_M'+str(m)+'/3_Non_processed/4_PLD_raw/')
# raw_folders


pqt_files = []
for k in missions.keys():
    for m in missions[k]:
       pqt_files.append('D:/Storage/Dropbox/Jupyter/Data/Skag_'+k+'_M'+str(m)+'.pqt')
pqt_files

 #['D:/Storage/Dropbox/VOTO_Data/8_KAMI-KZ_001/SEA057/SEA057_M28/3_Non_processed/2_NAV/','D:/Storage/Dropbox/VOTO_Data/8_KAMI-KZ_001/SEA057/SEA057_M28/3_Non_processed/4_PLD_raw/']
 #['D:/Storage/Dropbox/VOTO_Data/6_SAMBA_003/SEA045/SEA045_M36/3_Non_processed/2_NAV/','D:/Storage/Dropbox/VOTO_Data/6_SAMBA_003/SEA045/SEA045_M36/3_Non_processed/4_PLD_raw/']
 #['D:/Storage/Dropbox/VOTO_Data/7_SAMBA_004/SEA063/SEA063_M17/3_Non_processed/2_NAV/','D:/Storage/Dropbox/VOTO_Data/7_SAMBA_004/SEA063/SEA063_M17/3_Non_processed/4_PLD_raw/']
 #['D:/Storage/Dropbox/VOTO_Data/4_SAMBA_001/SEA045/SEA045_M33/3_Non_processed/2_NAV/','D:/Storage/Dropbox/VOTO_Data/4_SAMBA_001/SEA045/SEA045_M33/3_Non_processed/4_PLD_raw/']
 
 
 
 
 #### COMPASS ADJUSTMENT
 
 %%script false --no-raise-error

# Heading correction equation
#https://iopscience.iop.org/article/10.1088/0957-0233/25/8/085801/meta

plt.close('all')
plt.figure()

DTR = np.pi/180
RTD = 180/np.pi

x = np.arange(0,360)

A = DTR*5
B = DTR*15
C = DTR*15
D = DTR*15
E = DTR*15
O_obs = DTR*x

O_corr = ( O_obs + A + B*np.sin(O_obs) + C*np.cos(O_obs) + D*np.cos(2*O_obs) + E*np.sin(2*O_obs) )
y = RTD*O_corr


plt.plot(x,y)

